{
  "api/Dotnet.Shell.API.ExitException.html": {
    "href": "api/Dotnet.Shell.API.ExitException.html",
    "title": "Class ExitException | dotnet-shell",
    "keywords": "Class ExitException Throwing this exception will terminate the shell safely. Inheritance System.Object System.Exception ExitException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.API Assembly : dotnet-shell-lib.dll Syntax public class ExitException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/Dotnet.Shell.API.HistoryAPI.html": {
    "href": "api/Dotnet.Shell.API.HistoryAPI.html",
    "title": "Class HistoryAPI | dotnet-shell",
    "keywords": "Class HistoryAPI Inheritance System.Object HistoryAPI Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.API Assembly : dotnet-shell-lib.dll Syntax public class HistoryAPI Methods | Improve this Doc View Source ListenForSearchResultAsync(Action<Int32, String>) Listens for search requests asynchronous. Declaration public static async Task<string> ListenForSearchResultAsync(Action<int, string> onStartedListening) Parameters Type Name Description System.Action < System.Int32 , System.String > onStartedListening Called when listening has started. Returns Type Description System.Threading.Tasks.Task < System.String > Task Exceptions Type Condition System.IO.InvalidDataException Invalid token | Improve this Doc View Source SearchResultAsync(String, Int32, String) Searches the user history for a specific term. Declaration public static async Task SearchResultAsync(string term, int port, string token) Parameters Type Name Description System.String term The term. System.Int32 port The port the history server is listening on. System.String token The authentication token. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Dotnet.Shell.API.HistoryItem.html": {
    "href": "api/Dotnet.Shell.API.HistoryItem.html",
    "title": "Class HistoryItem | dotnet-shell",
    "keywords": "Class HistoryItem Representation of an item of shell history Inheritance System.Object HistoryItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.API Assembly : dotnet-shell-lib.dll Syntax public class HistoryItem Constructors | Improve this Doc View Source HistoryItem(String, DateTime) Initializes a new instance of the HistoryItem class. Declaration public HistoryItem(string command, DateTime time) Parameters Type Name Description System.String command The command. System.DateTime time The time. | Improve this Doc View Source HistoryItem(String, DateTime, Int32) Initializes a new instance of the HistoryItem class. Declaration [JsonConstructor] public HistoryItem(string cmdLine, DateTime timeRun, int legacyOffset) Parameters Type Name Description System.String cmdLine The command line. System.DateTime timeRun The time run. System.Int32 legacyOffset The legacy offset. | Improve this Doc View Source HistoryItem(String, Int32) Initializes a new instance of the HistoryItem class. Declaration public HistoryItem(string command, int offset) Parameters Type Name Description System.String command The command. System.Int32 offset The offset. Properties | Improve this Doc View Source CmdLine Gets or sets the command line. Declaration public string CmdLine { get; set; } Property Value Type Description System.String The command line. | Improve this Doc View Source LegacyOffset Gets or sets the legacy offset. In a file like .bash_history this is the line number Declaration public int LegacyOffset { get; set; } Property Value Type Description System.Int32 The legacy offset. | Improve this Doc View Source TimeRun Gets or sets the time run. Declaration public DateTime TimeRun { get; set; } Property Value Type Description System.DateTime The time run. Methods | Improve this Doc View Source Serialize() Serializes this instance to JSON Declaration public string Serialize() Returns Type Description System.String | Improve this Doc View Source ToString() Converts the history item into a command line Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/Dotnet.Shell.API.html": {
    "href": "api/Dotnet.Shell.API.html",
    "title": "Namespace Dotnet.Shell.API | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.API Classes ExitException Throwing this exception will terminate the shell safely. HistoryAPI HistoryItem Representation of an item of shell history Shell The Shell class is the primary place user can call to get access to shell functionality."
  },
  "api/Dotnet.Shell.API.Shell.html": {
    "href": "api/Dotnet.Shell.API.Shell.html",
    "title": "Class Shell | dotnet-shell",
    "keywords": "Class Shell The Shell class is the primary place user can call to get access to shell functionality. Inheritance System.Object Shell Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.API Assembly : dotnet-shell-lib.dll Syntax public class Shell Constructors | Improve this Doc View Source Shell(Boolean) Initializes a new instance of the Shell class. Declaration public Shell(bool loadHistory = true) Parameters Type Name Description System.Boolean loadHistory Fields | Improve this Doc View Source DefaultScriptExtension The default extension for scripts run through the scripting engine Declaration public const string DefaultScriptExtension = \".nsh\" Field Value Type Description System.String | Improve this Doc View Source ForegroundProcess The foreground process Declaration public ProcessEx ForegroundProcess Field Value Type Description ProcessEx | Improve this Doc View Source HistoryLoadedTask The history loaded task, wait on this to ensure all history elements have been loaded into memory Declaration public Task HistoryLoadedTask Field Value Type Description System.Threading.Tasks.Task | Improve this Doc View Source LastExecutedProcess The last executed process Declaration public ProcessEx LastExecutedProcess Field Value Type Description ProcessEx Properties | Improve this Doc View Source AssemblyLocation Gets the executing program location. Declaration public static string AssemblyLocation { get; } Property Value Type Description System.String The assembly location. | Improve this Doc View Source AutoCompletionHandlers A list of autocompletion handlers which can be used by the user to extend autocompletion results Declaration public virtual List<Func<string, int, Task<IEnumerable<Suggestion>>>> AutoCompletionHandlers { get; } Property Value Type Description System.Collections.Generic.List < System.Func < System.String , System.Int32 , System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable < Suggestion >>>> The autocompletion handlers. | Improve this Doc View Source BackgroundProcesses Gets the current set of background processes. Declaration public ProcessEx[] BackgroundProcesses { get; } Property Value Type Description ProcessEx [] The background processes. | Improve this Doc View Source BasePath Gets the base path. On Linux this is / on Windows C:\\ Declaration public static string BasePath { get; } Property Value Type Description System.String The base path. | Improve this Doc View Source CommandHandlers Gets or sets the command handler. This is called after the user has hit Enter and can be used to replace what was entered Declaration public virtual List<Func<string, string>> CommandHandlers { get; } Property Value Type Description System.Collections.Generic.List < System.Func < System.String , System.String >> The command handler. | Improve this Doc View Source Error This function can be called to render a pretty error message. Declaration public Action<string> Error { get; set; } Property Value Type Description System.Action < System.String > | Improve this Doc View Source History The shell history Declaration public virtual List<HistoryItem> History { get; } Property Value Type Description System.Collections.Generic.List < HistoryItem > | Improve this Doc View Source HomeDirectory Gets the home directory. Declaration public virtual string HomeDirectory { get; } Property Value Type Description System.String The home directory. | Improve this Doc View Source LastExitCode Gets or sets the last exit code. Declaration public int LastExitCode { get; } Property Value Type Description System.Int32 The last exit code. | Improve this Doc View Source LoadAssemblyFromFileAsync This function can be called to load a .NET DLL into memory Declaration public Func<string, Task> LoadAssemblyFromFileAsync { get; } Property Value Type Description System.Func < System.String , System.Threading.Tasks.Task > | Improve this Doc View Source LoadScriptFromFileAsync This function can be called to load script into memory Declaration public Func<string, Task> LoadScriptFromFileAsync { get; } Property Value Type Description System.Func < System.String , System.Threading.Tasks.Task > | Improve this Doc View Source Paths Gets the paths. Declaration public List<string> Paths { get; } Property Value Type Description System.Collections.Generic.List < System.String > The paths. | Improve this Doc View Source Prompt Gets or sets the function used to return the prompt string. This function is generally set by the user to customize the prompt Declaration public Func<ColorString> Prompt { get; set; } Property Value Type Description System.Func < ColorString > The prompt function | Improve this Doc View Source WorkingDirectory Gets or sets the working directory. Declaration public string WorkingDirectory { get; } Property Value Type Description System.String The working directory. Methods | Improve this Doc View Source AddCmdAlias(String, String) Adds a command alias An example of this is Shell.AddCmdAlias(\"ls\", \"ls --color=auto \"); Declaration public void AddCmdAlias(string command, string replacement) Parameters Type Name Description System.String command The user entered command. System.String replacement The C# replacement. | Improve this Doc View Source AddCSAlias(String, String) Adds a shell alias for C# commands An example of this is Shell.AddCSAlias(\"echo\", \"Console.WriteLine(&quot;{0}&quot;);\"); Declaration public void AddCSAlias(string command, string replacement) Parameters Type Name Description System.String command The user entered command. System.String replacement The C# replacement. | Improve this Doc View Source ChangeDir(String) API call to changes the working directory. Declaration public void ChangeDir(string location) Parameters Type Name Description System.String location The location. Exceptions Type Condition System.IO.DirectoryNotFoundException | Improve this Doc View Source ConvertPathToAbsolute(String) Converts the a file path to absolute based on the current working directory This is a public API and is used in #load Declaration public string ConvertPathToAbsolute(string file) Parameters Type Name Description System.String file The file path Returns Type Description System.String Exceptions Type Condition System.IO.FileNotFoundException The file requested: \" + file + \" does not exist and cannot be loaded | Improve this Doc View Source Execute(String, Object) Executes the an OS command synchronously. Declaration public ProcessEx Execute(string input, object r = null) Parameters Type Name Description System.String input The command line. System.Object r The redirection conditions, if any Returns Type Description ProcessEx Task | Improve this Doc View Source ExecuteAsync(String, Object) Executes the an OS command asynchronously. Declaration public Task<ProcessEx> ExecuteAsync(string input, object r = null) Parameters Type Name Description System.String input The command line. System.Object r The redirection conditions, if any Returns Type Description System.Threading.Tasks.Task < ProcessEx > Task | Improve this Doc View Source RemoveCmdAlias(String) Removes a command alias. Declaration public void RemoveCmdAlias(string command) Parameters Type Name Description System.String command The command. | Improve this Doc View Source RemoveCSAlias(String) Removes a C# alias. Declaration public void RemoveCSAlias(string command) Parameters Type Name Description System.String command The command. | Improve this Doc View Source TryReplaceWithCSAlias(String) Tries to replace the string with an alias which is a piece of C# Declaration public string TryReplaceWithCSAlias(string input) Parameters Type Name Description System.String input The user input command Returns Type Description System.String Command with possible alias replacement"
  },
  "api/Dotnet.Shell.Logic.Compilation.Executer.html": {
    "href": "api/Dotnet.Shell.Logic.Compilation.Executer.html",
    "title": "Class Executer | dotnet-shell",
    "keywords": "Class Executer The Executer is responsible for actually performing the execution of the commands the user has typed it. It is closely coupled with the preprocessor which turns the user supplied text into C# Inheritance System.Object Executer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Compilation Assembly : dotnet-shell-lib.dll Syntax public class Executer Properties | Improve this Doc View Source Args Gets the internal arguments the user/script has created Declaration public List<string> Args { get; } Property Value Type Description System.Collections.Generic.List < System.String > The arguments. | Improve this Doc View Source Shell Gets the shell. Declaration public Shell Shell { get; } Property Value Type Description Shell The shell. Methods | Improve this Doc View Source ExecuteAsync(String, Int32, Boolean) Executes a command asynchronous. Declaration public async Task ExecuteAsync(string line, int depth = 0, bool preprocess = true) Parameters Type Name Description System.String line The line. System.Int32 depth The current recursive depth. System.Boolean preprocess if set to true [preprocess]. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ExecuteFileAsync(String) Executes a script asynchronous. Declaration public async Task ExecuteFileAsync(string file) Parameters Type Name Description System.String file The file. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetDefaultExecuterAsync(ErrorDisplay) Gets the default execution environment asynchronously. Declaration public static async Task<Executer> GetDefaultExecuterAsync(ErrorDisplay errorHelper) Parameters Type Name Description ErrorDisplay errorHelper The error helper. Returns Type Description System.Threading.Tasks.Task < Executer > | Improve this Doc View Source LoadAssemblyFromFileAsync(String) Loads an assembly from file asynchronous. Declaration public Task LoadAssemblyFromFileAsync(string dll) Parameters Type Name Description System.String dll The DLL. Returns Type Description System.Threading.Tasks.Task Task Exceptions Type Condition System.IO.FileNotFoundException"
  },
  "api/Dotnet.Shell.Logic.Compilation.html": {
    "href": "api/Dotnet.Shell.Logic.Compilation.html",
    "title": "Namespace Dotnet.Shell.Logic.Compilation | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic.Compilation Classes Executer The Executer is responsible for actually performing the execution of the commands the user has typed it. It is closely coupled with the preprocessor which turns the user supplied text into C# PreProcessorSyntaxException"
  },
  "api/Dotnet.Shell.Logic.Compilation.PreProcessorSyntaxException.html": {
    "href": "api/Dotnet.Shell.Logic.Compilation.PreProcessorSyntaxException.html",
    "title": "Class PreProcessorSyntaxException | dotnet-shell",
    "keywords": "Class PreProcessorSyntaxException Inheritance System.Object System.Exception PreProcessorSyntaxException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.Logic.Compilation Assembly : dotnet-shell-lib.dll Syntax public class PreProcessorSyntaxException : Exception, ISerializable Constructors | Improve this Doc View Source PreProcessorSyntaxException(String, Int32) Declaration public PreProcessorSyntaxException(string msg, int line) Parameters Type Name Description System.String msg System.Int32 line | Improve this Doc View Source PreProcessorSyntaxException(String, Int32, List<Int32>) Declaration public PreProcessorSyntaxException(string msg, int line, List<int> relatedLines) Parameters Type Name Description System.String msg System.Int32 line System.Collections.Generic.List < System.Int32 > relatedLines Properties | Improve this Doc View Source Line Declaration public int Line { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RelatedLines Declaration public List<int> RelatedLines { get; } Property Value Type Description System.Collections.Generic.List < System.Int32 > Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Dotnet.Shell.Logic.Console.ConsoleImproved.html": {
    "href": "api/Dotnet.Shell.Logic.Console.ConsoleImproved.html",
    "title": "Class ConsoleImproved | dotnet-shell",
    "keywords": "Class ConsoleImproved This class implements improved handling for Console access including: multiline input hotkeys Inheritance System.Object ConsoleImproved Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Console Assembly : dotnet-shell-lib.dll Syntax public class ConsoleImproved Constructors | Improve this Doc View Source ConsoleImproved(IConsole, Shell) Initializes a new instance of the ConsoleImproved class. Declaration public ConsoleImproved(IConsole consoleImplementation, Shell shell) Parameters Type Name Description IConsole consoleImplementation The console implementation. Shell shell The shell. Fields | Improve this Doc View Source Tag An optional object to store state in Declaration public object Tag Field Value Type Description System.Object Properties | Improve this Doc View Source CursorPosition Gets the cursor position. Declaration public int CursorPosition { get; } Property Value Type Description System.Int32 The cursor position. | Improve this Doc View Source KeyOverrides Gets the key overrides. Declaration public List<KeyValuePair<ConsoleKeyEx, Func<ConsoleImproved, ConsoleKeyEx, Task<bool>>>> KeyOverrides { get; } Property Value Type Description System.Collections.Generic.List < System.Collections.Generic.KeyValuePair < ConsoleKeyEx , System.Func < ConsoleImproved , ConsoleKeyEx , System.Threading.Tasks.Task < System.Boolean >>>> The key overrides. | Improve this Doc View Source Shell Gets the shell. Declaration public Shell Shell { get; } Property Value Type Description Shell The shell. | Improve this Doc View Source UserEnteredText Gets or sets the user entered text. Declaration public string UserEnteredText { get; set; } Property Value Type Description System.String The user entered text. | Improve this Doc View Source UserEnteredTextPosition Gets the user entered text position. Declaration public int UserEnteredTextPosition { get; } Property Value Type Description System.Int32 The user entered text position. | Improve this Doc View Source Width Gets the width of the screen Declaration public int Width { get; } Property Value Type Description System.Int32 The width. Methods | Improve this Doc View Source AddKeyOverride(ConsoleKeyEx, Func<ConsoleImproved, ConsoleKeyEx, Task<Boolean>>) Adds a key override. Declaration public void AddKeyOverride(ConsoleKeyEx key, Func<ConsoleImproved, ConsoleKeyEx, Task<bool>> func) Parameters Type Name Description ConsoleKeyEx key The key. System.Func < ConsoleImproved , ConsoleKeyEx , System.Threading.Tasks.Task < System.Boolean >> func The function. | Improve this Doc View Source ClearUserEntry(Int32) Clears the user text entry from the screen. Declaration public void ClearUserEntry(int numLinesToClear = -1) Parameters Type Name Description System.Int32 numLinesToClear The number lines to clear. | Improve this Doc View Source DisplayPrompt(Boolean) Displays the prompt. Declaration public void DisplayPrompt(bool forcePromptOntoNewLine = true) Parameters Type Name Description System.Boolean forcePromptOntoNewLine if set to true [force prompt onto new line]. | Improve this Doc View Source DisplayPrompt(String, Boolean) Displays the prompt. Declaration public void DisplayPrompt(string text, bool forcePromptOntoNewLine) Parameters Type Name Description System.String text The text. System.Boolean forcePromptOntoNewLine if set to true [force prompt onto new line]. | Improve this Doc View Source GetCommandAsync(CancellationToken) Gets the command tryed in by the user asynchronously. Declaration public async Task<string> GetCommandAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > Task | Improve this Doc View Source IgnoreTab() Ignores the last tab character Declaration public void IgnoreTab() | Improve this Doc View Source ReplaceUserEntryAtPosition(String, Int32) Replaces the user text at the specified position. Declaration public void ReplaceUserEntryAtPosition(string text, int position) Parameters Type Name Description System.String text The text. System.Int32 position The position. | Improve this Doc View Source Reset() Resets this instance. Declaration public void Reset() | Improve this Doc View Source Write(ColorString) Writes the specified text. Declaration public void Write(ColorString text) Parameters Type Name Description ColorString text The text. | Improve this Doc View Source Write(String, Boolean) Writes the specified text. Declaration public void Write(string text = \"\", bool multiline = false) Parameters Type Name Description System.String text The text. System.Boolean multiline if set to true [multiline]. | Improve this Doc View Source WriteLine(ColorString) Writes the line. Declaration public void WriteLine(ColorString text) Parameters Type Name Description ColorString text The text. | Improve this Doc View Source WriteLine(String) Writes the line. Declaration public void WriteLine(string message = \"\") Parameters Type Name Description System.String message The message."
  },
  "api/Dotnet.Shell.Logic.Console.ConsoleKeyEx.html": {
    "href": "api/Dotnet.Shell.Logic.Console.ConsoleKeyEx.html",
    "title": "Class ConsoleKeyEx | dotnet-shell",
    "keywords": "Class ConsoleKeyEx A class that wraps both ConsoleKey and ConsoleModifiers to provide a clear representation of a keypress Inheritance System.Object ConsoleKeyEx Implements System.IEquatable < ConsoleKeyEx > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Console Assembly : dotnet-shell-lib.dll Syntax public class ConsoleKeyEx : IEquatable<ConsoleKeyEx> Constructors | Improve this Doc View Source ConsoleKeyEx(Nullable<ConsoleKey>, ConsoleModifiers) Initializes a new instance of the ConsoleKeyEx class. Declaration public ConsoleKeyEx(ConsoleKey? k, ConsoleModifiers m = (ConsoleModifiers)0) Parameters Type Name Description System.Nullable < System.ConsoleKey > k The k. System.ConsoleModifiers m The m. Properties | Improve this Doc View Source Any Gets an object representing ANY keypress Declaration public static ConsoleKeyEx Any { get; } Property Value Type Description ConsoleKeyEx Any keypress object | Improve this Doc View Source Key Gets the key. Declaration public ConsoleKey? Key { get; } Property Value Type Description System.Nullable < System.ConsoleKey > The key. | Improve this Doc View Source Modifier Gets the modifier. Declaration public ConsoleModifiers Modifier { get; } Property Value Type Description System.ConsoleModifiers The modifier. Methods | Improve this Doc View Source Equals(ConsoleKeyEx) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ConsoleKeyEx other) Parameters Type Name Description ConsoleKeyEx other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object y) Parameters Type Name Description System.Object y The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() Implements System.IEquatable<T> See Also System.IEquatable <T>"
  },
  "api/Dotnet.Shell.Logic.Console.DotNetConsole.html": {
    "href": "api/Dotnet.Shell.Logic.Console.DotNetConsole.html",
    "title": "Class DotNetConsole | dotnet-shell",
    "keywords": "Class DotNetConsole Inheritance System.Object DotNetConsole Implements IConsole Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Console Assembly : dotnet-shell-lib.dll Syntax public class DotNetConsole : IConsole Properties | Improve this Doc View Source BackgroundColor Declaration public ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source CursorLeft Declaration public int CursorLeft { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source CursorTop Declaration public int CursorTop { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ForegroundColor Declaration public ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source KeyAvailiable Declaration public bool KeyAvailiable { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ClearCurrentLine(Int32) Declaration public void ClearCurrentLine(int pos = -1) Parameters Type Name Description System.Int32 pos | Improve this Doc View Source MoveCursorDown(Int32) Declaration public void MoveCursorDown(int lines) Parameters Type Name Description System.Int32 lines | Improve this Doc View Source MoveCursorUp(Int32) Declaration public void MoveCursorUp(int lines) Parameters Type Name Description System.Int32 lines | Improve this Doc View Source ReadKey() Declaration public ConsoleKeyInfo ReadKey() Returns Type Description System.ConsoleKeyInfo | Improve this Doc View Source RestoreAsync() Declaration public Task RestoreAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RestoreCursorPosition(Action) Declaration public void RestoreCursorPosition(Action onRestore = null) Parameters Type Name Description System.Action onRestore | Improve this Doc View Source SaveAsync() Declaration public Task SaveAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SaveCursorPosition() Declaration public void SaveCursorPosition() | Improve this Doc View Source Write(String) Declaration public void Write(string text) Parameters Type Name Description System.String text | Improve this Doc View Source WriteLine(String) Declaration public void WriteLine(string message) Parameters Type Name Description System.String message Explicit Interface Implementations | Improve this Doc View Source IConsole.CursorVisible Declaration bool IConsole.CursorVisible { set; } Returns Type Description System.Boolean | Improve this Doc View Source IConsole.WindowHeight Declaration int IConsole.WindowHeight { get; } Returns Type Description System.Int32 | Improve this Doc View Source IConsole.WindowWidth Declaration int IConsole.WindowWidth { get; } Returns Type Description System.Int32 Implements IConsole"
  },
  "api/Dotnet.Shell.Logic.Console.html": {
    "href": "api/Dotnet.Shell.Logic.Console.html",
    "title": "Namespace Dotnet.Shell.Logic.Console | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic.Console Classes ConsoleImproved This class implements improved handling for Console access including: multiline input hotkeys ConsoleKeyEx A class that wraps both ConsoleKey and ConsoleModifiers to provide a clear representation of a keypress DotNetConsole Interfaces IConsole Defines the method that a console implementation is required to provide"
  },
  "api/Dotnet.Shell.Logic.Console.IConsole.html": {
    "href": "api/Dotnet.Shell.Logic.Console.IConsole.html",
    "title": "Interface IConsole | dotnet-shell",
    "keywords": "Interface IConsole Defines the method that a console implementation is required to provide Namespace : Dotnet.Shell.Logic.Console Assembly : dotnet-shell-lib.dll Syntax public interface IConsole Properties | Improve this Doc View Source BackgroundColor Gets or sets the color of the background. Declaration ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor The color of the background. | Improve this Doc View Source CursorLeft Gets or sets the cursor left position. Declaration int CursorLeft { get; set; } Property Value Type Description System.Int32 The cursor left position. | Improve this Doc View Source CursorTop Gets or sets the cursor top position. Declaration int CursorTop { get; set; } Property Value Type Description System.Int32 The cursor top position. | Improve this Doc View Source CursorVisible Sets a value indicating whether [cursor visible]. Declaration bool CursorVisible { set; } Property Value Type Description System.Boolean true if [cursor visible]; otherwise, false . | Improve this Doc View Source ForegroundColor Gets or sets the color of the foreground. Declaration ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor The color of the foreground. | Improve this Doc View Source KeyAvailiable Gets a value indicating whether [key availiable]. Declaration bool KeyAvailiable { get; } Property Value Type Description System.Boolean true if [key availiable]; otherwise, false . | Improve this Doc View Source WindowHeight Gets the height of the window. Declaration int WindowHeight { get; } Property Value Type Description System.Int32 The height of the window. | Improve this Doc View Source WindowWidth Gets the width of the window. Declaration int WindowWidth { get; } Property Value Type Description System.Int32 The width of the window. Methods | Improve this Doc View Source ClearCurrentLine(Int32) Clears the current line from given position. Declaration void ClearCurrentLine(int pos = -1) Parameters Type Name Description System.Int32 pos If set the current line will be cleared from this position, cursor will be moved here. | Improve this Doc View Source MoveCursorDown(Int32) Moves the cursor down. Declaration void MoveCursorDown(int lines) Parameters Type Name Description System.Int32 lines The lines. | Improve this Doc View Source MoveCursorUp(Int32) Moves the cursor up. Declaration void MoveCursorUp(int lines) Parameters Type Name Description System.Int32 lines The lines. | Improve this Doc View Source ReadKey() Reads the next key press Declaration ConsoleKeyInfo ReadKey() Returns Type Description System.ConsoleKeyInfo ConsoleKeyInfo | Improve this Doc View Source RestoreAsync() Restores the terminal screen state Declaration Task RestoreAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RestoreCursorPosition(Action) Restores the cursor position. Declaration void RestoreCursorPosition(Action onRestore = null) Parameters Type Name Description System.Action onRestore The on restore. | Improve this Doc View Source SaveAsync() Saves the terminal screen state Declaration Task SaveAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SaveCursorPosition() Saves the cursor position. Declaration void SaveCursorPosition() | Improve this Doc View Source Write(String) Writes the specified text. Declaration void Write(string text = null) Parameters Type Name Description System.String text The text. | Improve this Doc View Source WriteLine(String) Writes the specified text with a newline at the end Declaration void WriteLine(string message = null) Parameters Type Name Description System.String message The message."
  },
  "api/Dotnet.Shell.Logic.Execution.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.html",
    "title": "Namespace Dotnet.Shell.Logic.Execution | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic.Execution Classes OS This class implements OS actions such as Execution ProcessEx Enums Redirection Flags to determine which stream has been redirected"
  },
  "api/Dotnet.Shell.Logic.Execution.OS.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.OS.html",
    "title": "Class OS | dotnet-shell",
    "keywords": "Class OS This class implements OS actions such as Execution Inheritance System.Object OS Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Execution Assembly : dotnet-shell-lib.dll Syntax public class OS Methods | Improve this Doc View Source Exec(String, Object, Object) Executes the specified cmdline. Declaration public static ProcessEx Exec(string cmdline, object shellObj = null, object redirectionObj = null) Parameters Type Name Description System.String cmdline The cmdline. System.Object shellObj The shell object. System.Object redirectionObj The redirection object. Returns Type Description ProcessEx Process | Improve this Doc View Source GetOSHistoryAsync() Gets the OS command history. Declaration public static async Task<IEnumerable<HistoryItem>> GetOSHistoryAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable < HistoryItem >> History | Improve this Doc View Source WriteHistoryAsync(IEnumerable<HistoryItem>) Writes the history asynchronous to the configured history file Declaration public static async Task WriteHistoryAsync(IEnumerable<HistoryItem> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < HistoryItem > history The history. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Dotnet.Shell.Logic.Execution.ProcessEx.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.ProcessEx.html",
    "title": "Class ProcessEx | dotnet-shell",
    "keywords": "Class ProcessEx Inheritance System.Object ProcessEx Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Execution Assembly : dotnet-shell-lib.dll Syntax public class ProcessEx : IDisposable Constructors | Improve this Doc View Source ProcessEx(Process) Declaration public ProcessEx(Process p) Parameters Type Name Description System.Diagnostics.Process p Properties | Improve this Doc View Source Process Declaration public Process Process { get; } Property Value Type Description System.Diagnostics.Process Methods | Improve this Doc View Source ConvertStdErrToVariable<T>() Converts the standard error to variable. Declaration public T ConvertStdErrToVariable<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ConvertStdOutToVariable<T>() Converts the standard out to variable. Declaration public T ConvertStdOutToVariable<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source CopyStdErr(Object, Stream) Copies the standard error. Declaration public ProcessEx CopyStdErr(object s, Stream stream) Parameters Type Name Description System.Object s The s. System.IO.Stream stream Returns Type Description ProcessEx | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source SignalSuspend() Declaration public void SignalSuspend() | Improve this Doc View Source SignalTerminate() Declaration public void SignalTerminate() | Improve this Doc View Source WaitForExitAsync(CancellationToken) Declaration public Task WaitForExitAsync(CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WaitTillExit(Object) Sets the last exit code. Declaration public ProcessEx WaitTillExit(object s) Parameters Type Name Description System.Object s The s. Returns Type Description ProcessEx Implements System.IDisposable"
  },
  "api/Dotnet.Shell.Logic.Execution.Redirection.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.Redirection.html",
    "title": "Enum Redirection | dotnet-shell",
    "keywords": "Enum Redirection Flags to determine which stream has been redirected Namespace : Dotnet.Shell.Logic.Execution Assembly : dotnet-shell-lib.dll Syntax [Flags] public enum Redirection Fields Name Description Err StdErr redirection None No stream redirection Out StdOut redirection"
  },
  "api/Dotnet.Shell.Logic.html": {
    "href": "api/Dotnet.Shell.Logic.html",
    "title": "Namespace Dotnet.Shell.Logic | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic Classes Settings This defined all the global settings these can either be set on the command line or via a script Enums UserExperience The User Experience to use when console rendering"
  },
  "api/Dotnet.Shell.Logic.Settings.html": {
    "href": "api/Dotnet.Shell.Logic.Settings.html",
    "title": "Class Settings | dotnet-shell",
    "keywords": "Class Settings This defined all the global settings these can either be set on the command line or via a script Inheritance System.Object Settings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic Assembly : dotnet-shell-lib.dll Syntax public class Settings Fields | Improve this Doc View Source Default The default settings used by dotnet-shell Declaration public static Settings Default Field Value Type Description Settings Properties | Improve this Doc View Source AdditionalHistoryFiles Adds one or more history file History files are interpreted as one command per line Declaration [Option(\"additionalHistory\", Required = false, HelpText = \"Path to additional OS specific history files\")] public IEnumerable<string> AdditionalHistoryFiles { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > The history files. | Improve this Doc View Source AdditionalUsings Gets the additional usings. Declaration [Option('u', \"using\", Required = false, HelpText = \"Additional 'using' statements to include\")] public IEnumerable<string> AdditionalUsings { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > The additional usings. | Improve this Doc View Source APIPort Gets or sets the API port. Declaration [Option(\"apiport\", Required = false, HelpText = \"The port number of the API interface\", Hidden = true, SetName = \"history\")] public int APIPort { get; set; } Property Value Type Description System.Int32 The API port. | Improve this Doc View Source DontRunWizard Declaration [Option(\"nowizard\", Required = false, HelpText = \"Do not try and run the initial set up wizard\", Default = false)] public bool DontRunWizard { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EarlyDebuggerAttach Gets or sets a value indicating whether [early debugger attach]. Declaration [Option(\"earlyDebuggerAttach\", Required = false, HelpText = \"Enables early debugging for initialization related issues\", Default = false)] public bool EarlyDebuggerAttach { get; set; } Property Value Type Description System.Boolean true if [early debugger attach]; otherwise, false . | Improve this Doc View Source HistoryFile Declaration [Option(\"historyPath\", Required = false, HelpText = \"Path to CSX history file\")] public string HistoryFile { get; set; } Property Value Type Description System.String | Improve this Doc View Source HistoryMode Gets or sets a value indicating whether [history mode]. Declaration [Option(\"history\", Required = false, HelpText = \"Starts the shell in history display mode\", Hidden = true, Default = false, SetName = \"history\")] public bool HistoryMode { get; set; } Property Value Type Description System.Boolean true if [history mode]; otherwise, false . | Improve this Doc View Source HistoryPopupCommand Gets the history popup command. Declaration [Option(\"historyCmd\", Required = false, HelpText = \"dotnet-shell command line to execute when the history subprocess. Must include {0} format specifier for DLL location, {1} for port and {2} for token parameters\", Default = \"dotnet {0} --history --apiport {1} --token {2}\")] public string HistoryPopupCommand { get; set; } Property Value Type Description System.String The history popup command. | Improve this Doc View Source PopupCommand Gets the popup command. Declaration [Option(\"popupCmd\", Required = false, HelpText = \"Command to run to raise a system popup window, must include {0} format specifier for the dotnet-shell command\", Default = \"tmux popup -KER '{0}' -x 60 -y 0 -w 60% -h 100%\")] public string PopupCommand { get; set; } Property Value Type Description System.String The popup command. | Improve this Doc View Source ProfileScriptPath Gets the profile script path. Declaration [Option(\"profile\", Required = false, HelpText = \"The path to the personal initialization script file (core.nsh)\")] public string ProfileScriptPath { get; set; } Property Value Type Description System.String The profile script path. | Improve this Doc View Source ShowPreProcessorOutput Gets or sets a value indicating whether [show pre processor output]. Declaration [Option(\"showPreProcessorOutput\", Required = false, HelpText = \"Outputs preprocessed scripts and commands to StdOut prior to execution\", Default = false)] public bool ShowPreProcessorOutput { get; set; } Property Value Type Description System.Boolean true if [show pre processor output]; otherwise, false . | Improve this Doc View Source SubShell Gets the sub shell. Declaration [Option('s', \"subShell\", Required = false, HelpText = \"Path to the sub shell to invoke commands with\")] public string SubShell { get; set; } Property Value Type Description System.String The sub shell. | Improve this Doc View Source SubShellArgumentsFormat Gets the sub shell arguments format. Declaration [Option('a', \"subShellArgs\", Required = false, HelpText = \"Arguments to the provided to the SubShell, this MUST include the format specifier {0}\")] public string SubShellArgumentsFormat { get; set; } Property Value Type Description System.String The sub shell arguments format. | Improve this Doc View Source Token Gets or sets the token. Declaration [Option(\"token\", Required = false, HelpText = \"Token shared between client and server instances\", Hidden = true, SetName = \"history\")] public string Token { get; set; } Property Value Type Description System.String The token. | Improve this Doc View Source UX Gets or sets the user experience mode. Declaration [Option('x', \"ux\", Required = false, HelpText = \"The user experience mode the shell starts in\", Default = UserExperience.Enhanced)] public UserExperience UX { get; set; } Property Value Type Description UserExperience The ux. | Improve this Doc View Source Verbose Gets or sets a value indicating whether this Settings is verbose. Declaration [Option('v', \"verbose\", Required = false, HelpText = \"Set output to verbose messages.\", Default = false)] public bool Verbose { get; set; } Property Value Type Description System.Boolean true if verbose; otherwise, false . Methods | Improve this Doc View Source AddComplexDefaults() Declaration public void AddComplexDefaults()"
  },
  "api/Dotnet.Shell.Logic.Suggestions.html": {
    "href": "api/Dotnet.Shell.Logic.Suggestions.html",
    "title": "Namespace Dotnet.Shell.Logic.Suggestions | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic.Suggestions Classes Suggestion Class which refines an auto suggestion result Suggestions"
  },
  "api/Dotnet.Shell.Logic.Suggestions.Suggestion.html": {
    "href": "api/Dotnet.Shell.Logic.Suggestions.Suggestion.html",
    "title": "Class Suggestion | dotnet-shell",
    "keywords": "Class Suggestion Class which refines an auto suggestion result Inheritance System.Object Suggestion Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Suggestions Assembly : dotnet-shell-lib.dll Syntax public class Suggestion Properties | Improve this Doc View Source CompletionText Gets or sets the completion text. This is the substring to be added to the current command line input text. This might be something like teLine when Console.Wri was typed Declaration public string CompletionText { get; set; } Property Value Type Description System.String The completion text. | Improve this Doc View Source FullText Gets or sets the full text. This might be something like WriteLine when Console.Wri was typed Declaration public ColorString FullText { get; set; } Property Value Type Description ColorString The full text. | Improve this Doc View Source Index Gets or sets the index. This is the position the new text should be inserted at Declaration public int Index { get; set; } Property Value Type Description System.Int32 The index. Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode()"
  },
  "api/Dotnet.Shell.Logic.Suggestions.Suggestions.html": {
    "href": "api/Dotnet.Shell.Logic.Suggestions.Suggestions.html",
    "title": "Class Suggestions | dotnet-shell",
    "keywords": "Class Suggestions Inheritance System.Object Suggestions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Suggestions Assembly : dotnet-shell-lib.dll Syntax public class Suggestions Constructors | Improve this Doc View Source Suggestions(Shell) Declaration public Suggestions(Shell shell) Parameters Type Name Description Shell shell Methods | Improve this Doc View Source OnTabSuggestCmdAsync(ConsoleImproved, ConsoleKeyEx) Declaration public async Task<bool> OnTabSuggestCmdAsync(ConsoleImproved prompt, ConsoleKeyEx key) Parameters Type Name Description ConsoleImproved prompt ConsoleKeyEx key Returns Type Description System.Threading.Tasks.Task < System.Boolean >"
  },
  "api/Dotnet.Shell.Logic.UserExperience.html": {
    "href": "api/Dotnet.Shell.Logic.UserExperience.html",
    "title": "Enum UserExperience | dotnet-shell",
    "keywords": "Enum UserExperience The User Experience to use when console rendering Namespace : Dotnet.Shell.Logic Assembly : dotnet-shell-lib.dll Syntax public enum UserExperience Fields Name Description Classic The classic mode - similar to Bash Enhanced Enhanced mode with improved history TmuxEnhanced The TMux enhanced version which uses Tmux popup functionality"
  },
  "api/Dotnet.Shell.UI.ColorString.html": {
    "href": "api/Dotnet.Shell.UI.ColorString.html",
    "title": "Class ColorString | dotnet-shell",
    "keywords": "Class ColorString Implements a color string replacemnt class using ANSI formatting escape codes Inheritance System.Object ColorString Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.UI Assembly : dotnet-shell-lib.dll Syntax public class ColorString Constructors | Improve this Doc View Source ColorString(String, Color) Initializes a new instance of the ColorString class. Declaration public ColorString(string s, Color c) Parameters Type Name Description System.String s The s. System.Drawing.Color c The c. | Improve this Doc View Source ColorString(String, Color, Color) Initializes a new instance of the ColorString class. Declaration public ColorString(string s, Color c, Color d) Parameters Type Name Description System.String s The s. System.Drawing.Color c The c. System.Drawing.Color d The d. Properties | Improve this Doc View Source Item[Int32] Gets the System.Char with the specified i. Declaration public char this[int i] { get; } Parameters Type Name Description System.Int32 i The i. Property Value Type Description System.Char The System.Char . | Improve this Doc View Source Length Gets the length. Declaration public int Length { get; } Property Value Type Description System.Int32 The length. | Improve this Doc View Source Text Gets the string representation but without formatting characters Declaration public string Text { get; } Property Value Type Description System.String | Improve this Doc View Source TextWithFormattingCharacters Gets the string representation but WITH formatting characters Declaration public string TextWithFormattingCharacters { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source FromRawANSI(String) Convert to a color string from an ANSI string with escape sequences Declaration public static ColorString FromRawANSI(string ansi) Parameters Type Name Description System.String ansi Returns Type Description ColorString | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Operators | Improve this Doc View Source Addition(ColorString, ColorString) Implements the operator +. Declaration public static ColorString operator +(ColorString a, ColorString b) Parameters Type Name Description ColorString a a. ColorString b The b. Returns Type Description ColorString The result of the operator. | Improve this Doc View Source Implicit(String to ColorString) Performs an implicit conversion from System.String to ColorString . Declaration public static implicit operator ColorString(string t) Parameters Type Name Description System.String t The t. Returns Type Description ColorString The result of the conversion."
  },
  "api/Dotnet.Shell.UI.Enhanced.HistoryBox.html": {
    "href": "api/Dotnet.Shell.UI.Enhanced.HistoryBox.html",
    "title": "Class HistoryBox | dotnet-shell",
    "keywords": "Class HistoryBox Inheritance System.Object HistoryBox Implements ConsoleGUI.Input.IInputListener Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.UI.Enhanced Assembly : dotnet-shell-lib.dll Syntax public class HistoryBox : IInputListener Constructors | Improve this Doc View Source HistoryBox(IConsole) Declaration public HistoryBox(IConsole console) Parameters Type Name Description IConsole console Methods | Improve this Doc View Source OnInput(InputEvent) Declaration public void OnInput(InputEvent inputEvent) Parameters Type Name Description ConsoleGUI.Input.InputEvent inputEvent | Improve this Doc View Source OnSearchHistory(IConsole) Declaration public static Func<ConsoleImproved, ConsoleKeyEx, Task<bool>> OnSearchHistory(IConsole console) Parameters Type Name Description IConsole console Returns Type Description System.Func < ConsoleImproved , ConsoleKeyEx , System.Threading.Tasks.Task < System.Boolean >> | Improve this Doc View Source OnSearchHistoryTmux() Declaration public static Func<ConsoleImproved, ConsoleKeyEx, Task<bool>> OnSearchHistoryTmux() Returns Type Description System.Func < ConsoleImproved , ConsoleKeyEx , System.Threading.Tasks.Task < System.Boolean >> | Improve this Doc View Source RunInterfaceAsync(List<HistoryItem>) Declaration public async Task<string> RunInterfaceAsync(List<HistoryItem> history) Parameters Type Name Description System.Collections.Generic.List < HistoryItem > history Returns Type Description System.Threading.Tasks.Task < System.String > Implements ConsoleGUI.Input.IInputListener"
  },
  "api/Dotnet.Shell.UI.Enhanced.html": {
    "href": "api/Dotnet.Shell.UI.Enhanced.html",
    "title": "Namespace Dotnet.Shell.UI.Enhanced | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.UI.Enhanced Classes HistoryBox"
  },
  "api/Dotnet.Shell.UI.ErrorDisplay.html": {
    "href": "api/Dotnet.Shell.UI.ErrorDisplay.html",
    "title": "Class ErrorDisplay | dotnet-shell",
    "keywords": "Class ErrorDisplay This class handles displaying of errors to the screen Inheritance System.Object ErrorDisplay Implements Microsoft.Extensions.Options.IOptionsMonitor < Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.UI Assembly : dotnet-shell-lib.dll Syntax public class ErrorDisplay : IOptionsMonitor<ConsoleLoggerOptions> Constructors | Improve this Doc View Source ErrorDisplay(IConsole) Initializes a new instance of the ErrorDisplay class. Declaration public ErrorDisplay(IConsole console) Parameters Type Name Description IConsole console The console. Properties | Improve this Doc View Source CurrentValue Returns the current TOptions instance with the Microsoft.Extensions.Options.Options.DefaultName . Declaration public ConsoleLoggerOptions CurrentValue { get; } Property Value Type Description Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions Methods | Improve this Doc View Source Get(String) Returns a configured TOptions instance with the given name. Declaration public ConsoleLoggerOptions Get(string name) Parameters Type Name Description System.String name Returns Type Description Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions | Improve this Doc View Source OnChange(Action<ConsoleLoggerOptions, String>) Registers a listener to be called whenever a named TOptions changes. Declaration public IDisposable OnChange(Action<ConsoleLoggerOptions, string> listener) Parameters Type Name Description System.Action < Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions , System.String > listener The action to be invoked when TOptions has changed. Returns Type Description System.IDisposable An System.IDisposable which should be disposed to stop listening for changes. | Improve this Doc View Source PrettyError(ColorString) Prints the color string as an error Declaration public void PrettyError(ColorString msg) Parameters Type Name Description ColorString msg The MSG. | Improve this Doc View Source PrettyError(String) Prints the string as an error Declaration public void PrettyError(string msg) Parameters Type Name Description System.String msg The MSG. | Improve this Doc View Source PrettyException(Exception, String, String) Pretty prints the exception. Declaration public void PrettyException(Exception ex, string input = null, string originalInput = null) Parameters Type Name Description System.Exception ex The ex. System.String input The input. System.String originalInput The original input. | Improve this Doc View Source PrettyInfo(String) Prints the string at information level Declaration public static void PrettyInfo(string line) Parameters Type Name Description System.String line The line. Implements Microsoft.Extensions.Options.IOptionsMonitor<TOptions> See Also Microsoft.Extensions.Options.IOptionsMonitor <TOptions>"
  },
  "api/Dotnet.Shell.UI.html": {
    "href": "api/Dotnet.Shell.UI.html",
    "title": "Namespace Dotnet.Shell.UI | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.UI Classes ColorString Implements a color string replacemnt class using ANSI formatting escape codes ErrorDisplay This class handles displaying of errors to the screen"
  },
  "api/Dotnet.Shell.UI.Standard.HistorySearch.html": {
    "href": "api/Dotnet.Shell.UI.Standard.HistorySearch.html",
    "title": "Class HistorySearch | dotnet-shell",
    "keywords": "Class HistorySearch Inheritance System.Object HistorySearch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.UI.Standard Assembly : dotnet-shell-lib.dll Syntax public class HistorySearch Constructors | Improve this Doc View Source HistorySearch(IConsole, Shell) Declaration public HistorySearch(IConsole console, Shell shell) Parameters Type Name Description IConsole console Shell shell Methods | Improve this Doc View Source OnSearchHistory(IConsole, Shell) Declaration public static Func<ConsoleImproved, ConsoleKeyEx, Task<bool>> OnSearchHistory(IConsole console, Shell shell) Parameters Type Name Description IConsole console Shell shell Returns Type Description System.Func < ConsoleImproved , ConsoleKeyEx , System.Threading.Tasks.Task < System.Boolean >>"
  },
  "api/Dotnet.Shell.UI.Standard.html": {
    "href": "api/Dotnet.Shell.UI.Standard.html",
    "title": "Namespace Dotnet.Shell.UI.Standard | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.UI.Standard Classes HistorySearch"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to dotnet-shell the C# script compatible shell | dotnet-shell",
    "keywords": "Welcome to dotnet-shell the C# script compatible shell dotnet-shell is a replacement for your *Unix shell (bash,sh,dash etc) that brings C#/Dotnet to the command line in a familiar and Bash-like syntax. It combines the best of C# with the shell commands you already know. If you've used dotnetscript or nake you will feel right at home. Best of all it is easy to take your existing Unix shell scripts and port them to dotnet-shell format. dotnet-shell acts as a meta shell that sits on top of your system shell (Bash/PowerShell etc). It replaces hard to remember loop/if syntax with C# and enables you to use the shell constructs that you know and can't unlearn! It works in both interactive and script modes allowing you to build variables and arguments in C# and use them easily in shell commands. It is fully featured, supporting: Bash-style tab completion augmented with C# autocompletion Advanced history searching with an improved UX (helped by tmux if desired) Support for loading Nugets, DLLs and other scripts Powerline, command aliasing Comparison to other projects / check these out too Since the dotnet runtime enabled REPL (Read Evaluate Print Loop) support there have been a few different projects that have evolved to use it, some of the best are: dotnet-script - A great scripting environment which we use internally to run commands. The UX however is not designed for everyday use and the command line environment lacks an easy way to run system commands. Nake - Another great project focused on build scripts instead of interactive shell environments. Orbital Shell - A great project but focused on being cross platform, supporting the same commands on multiple platforms, as such 'OS' commands have been reimplemented. We took the view of keeping existing logic/syntax similar enough to aid porting. How to install First you need to install the .NET5. runtime. this is usually easiest via your OS' package manager. Next run: dotnet --info If you see a lot of .NET version information that starts with 5.0 then you have a working copy of the .NET runtime. dotnet-shell is a dotnet tool. It is installed by: dotnet tool install -g dotnet-shell OS Status Linux Stable Windows Experimental Mac Should work untested BSD Unsupported Syntax cheatsheet In general dotnet-shell uses the same syntax of dotnetscript . To make some operations easier this has been extended so that: shell commands are created from any line that doesn't end with a ';' or part of existing C# syntax - just like in Bash backtick characters allow you to execute a command and capture its stdout (rather than letting it go to the screen) nake style variables $...$ allow you to take variables from C# and include these in your system commands A key point to note is that in generally a line needs to end with a ';' to be interpreted as C# (unless it is part of loop, class etc) File extension Usage CSX File contains dotnetscript syntax - no dotnet-shell extension can be used nsh CSX script syntax with our extensions CS Can be loaded and executed with #load DLL Can be loaded with #r The ExampleScripts repo is a good place to see what you can do. #!/usr/bin/env dotnet-shell #r \"System.Xml.Linq\" // reference assemblies #r \"nuget: Newtonsoft.Json\" // and nuget packages is fully supported #load \"Other.csx\" // You can load other script files #load ~/ExampleScripts/CmdSyntax.nsh // (both absolute and relative paths are fine) using System; // many namespaces are loaded by default using System.Collections.Generic; using System.Data; using System.Xml; using System.Xml.Linq; using Microsoft.CSharp; using static System.Console; // static members smake your scripts shorter WriteLine(\"Are you ready? Y/N:\"); // You can run a system command just like in Bash echo \"Hello world\" // Wrapping a command in ``(backticks) allows you to capture the output var x = `ps`; // but default this is a string // You can also create more complex objects DirectoryInfo dir = `/bin/echo /bin/`; FileInfo file = `/bin/echo /bin/ls`; int aNumber=`/bin/echo 500`; // You can combine these into something quite powerful List<string> z=`dmesg`; z.Distinct().Count(); var variable = \"Lets say you have a variable\"; // This is how you pass it into a system command echo $variable$ Useful tips and tricks Escaping input automatically - the following one liner will print escaped C#. Great for copy and pasting into your codebase. Console.ReadLine(); Command line help -v, --verbose (Default: false) Set output to verbose messages. --earlyDebuggerAttach (Default: false) Enables early debugging for initialization related issues --showPreProcessorOutput (Default: false) Outputs preprocessed scripts and commands to StdOut prior to execution -x, --ux (Default: Enhanced) The user experience mode the shell starts in --profile The path to the personal initialization script file (core.nsh) -s, --subShell Path to the sub shell to invoke commands with -a, --subShellArgs Arguments to the provided to the SubShell, this MUST include the format specifier {0} -u, --using Additional 'using' statements to include --popupCmd (Default: tmux popup -KER '{0}' -x 60 -y 0 -w 60% -h 100%) Command to run to raise a system popup window, must include {0} format specifier for the dotnet-shell command --historyCmd (Default: dotnet {0} --history --apiport {1} --token {2}) dotnet-shell command line to execute when the history subprocess. Must include {0} format specifier for DLL location, {1} for port and {2} for token parameters --additionalHistory Path to additional OS specific history files --historyPath Path to CSX history file --nowizard (Default: false) Do not try and run the initial set up wizard --help Display this help screen. --version Display version information. How to build from source Visual Studio solutions and VS Code projects are published with this repo. Otherwise you can checkout the repo and run: dotnet build dotnet src/Shell/bin/Debug/net5.0/dotnet-shell.dll Author i-am-shodan Twitter: @therealshodan Github: @i-am-shodan Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . License Copyright © 2021 i-am-shodan . This project is MIT licensed. This README was generated by readme-md-generator"
  },
  "prompts.html": {
    "href": "prompts.html",
    "title": "Customizing your prompt | dotnet-shell",
    "keywords": "Customizing your prompt Dotnet-shell supports prompt customization through the Shell.Prompt API function . To use this simply declare a function that will be called everytime a prompt is to be rendered and set this to Shell.Prompt. You can do this at any time but doing this in core.nsh will mean your prompt will always be displayed first. Powerline By default dotnet-shell ships with basinc support for Powerline - you can find this in core.nsh. A terse example is given here: Shell.Prompt = () => { string powerLinePrompt=`powerline-render shell left --last-exit-code=$Shell.LastExitCode$`; return ColorString.FromRawANSI( powerLinePrompt ); }; Starship Starship support can be added to dotnet-shell using the following syntax in you core.nsh file. Shell.Prompt = () => var prompt = `starship prompt --status=$Shell.LastExitCode$ --jobs=$Shell.BackgroundProcesses.Count()$`; return ColorString.FromRawANSI(prompt); };"
  }
}