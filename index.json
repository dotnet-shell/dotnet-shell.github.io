{
  "api/Dotnet.Shell.API.ExitException.html": {
    "href": "api/Dotnet.Shell.API.ExitException.html",
    "title": "Class ExitException | dotnet-shell",
    "keywords": "Class ExitException Throwing this exception will terminate the shell safely. Inheritance System.Object System.Exception ExitException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.API Assembly : dotnet-shell.dll Syntax public class ExitException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/Dotnet.Shell.API.HistoryItem.html": {
    "href": "api/Dotnet.Shell.API.HistoryItem.html",
    "title": "Class HistoryItem | dotnet-shell",
    "keywords": "Class HistoryItem Representation of an item of shell history Inheritance System.Object HistoryItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.API Assembly : dotnet-shell.dll Syntax public class HistoryItem Constructors | Improve this Doc View Source HistoryItem(String, DateTime) Initializes a new instance of the HistoryItem class. Declaration public HistoryItem(string command, DateTime time) Parameters Type Name Description System.String command The command. System.DateTime time The time. | Improve this Doc View Source HistoryItem(String, DateTime, Int32) Initializes a new instance of the HistoryItem class. Declaration [JsonConstructor] public HistoryItem(string cmdLine, DateTime timeRun, int legacyOffset) Parameters Type Name Description System.String cmdLine The command line. System.DateTime timeRun The time run. System.Int32 legacyOffset The legacy offset. | Improve this Doc View Source HistoryItem(String, Int32) Initializes a new instance of the HistoryItem class. Declaration public HistoryItem(string command, int offset) Parameters Type Name Description System.String command The command. System.Int32 offset The offset. Properties | Improve this Doc View Source CmdLine Gets or sets the command line. Declaration public string CmdLine { get; set; } Property Value Type Description System.String The command line. | Improve this Doc View Source LegacyOffset Gets or sets the legacy offset. In a file like .bash_history this is the line number Declaration public int LegacyOffset { get; set; } Property Value Type Description System.Int32 The legacy offset. | Improve this Doc View Source TimeRun Gets or sets the time run. Declaration public DateTime TimeRun { get; set; } Property Value Type Description System.DateTime The time run. Methods | Improve this Doc View Source Serialize() Serializes this instance to JSON Declaration public string Serialize() Returns Type Description System.String | Improve this Doc View Source ToString() Converts the history item into a command line Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/Dotnet.Shell.API.html": {
    "href": "api/Dotnet.Shell.API.html",
    "title": "Namespace Dotnet.Shell.API | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.API Classes ExitException Throwing this exception will terminate the shell safely. HistoryItem Representation of an item of shell history Shell The Shell class is the primary place user can call to get access to shell functionality."
  },
  "api/Dotnet.Shell.API.Shell.html": {
    "href": "api/Dotnet.Shell.API.Shell.html",
    "title": "Class Shell | dotnet-shell",
    "keywords": "Class Shell The Shell class is the primary place user can call to get access to shell functionality. Inheritance System.Object Shell Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.API Assembly : dotnet-shell.dll Syntax public class Shell Constructors | Improve this Doc View Source Shell(Boolean) Initializes a new instance of the Shell class. Declaration public Shell(bool loadHistory = true) Parameters Type Name Description System.Boolean loadHistory Fields | Improve this Doc View Source DefaultScriptExtension The default extension for scripts run through the scripting engine Declaration public const string DefaultScriptExtension = \".nsh\" Field Value Type Description System.String | Improve this Doc View Source ForegroundProcess The foreground process Declaration public ProcessEx ForegroundProcess Field Value Type Description ProcessEx | Improve this Doc View Source LastExecutedProcess The last executed process Declaration public ProcessEx LastExecutedProcess Field Value Type Description ProcessEx Properties | Improve this Doc View Source AssemblyLocation Gets the executing program location. Declaration public string AssemblyLocation { get; } Property Value Type Description System.String The assembly location. | Improve this Doc View Source BackgroundProcesses Gets the current set of background processes. Declaration public ProcessEx[] BackgroundProcesses { get; } Property Value Type Description ProcessEx [] The background processes. | Improve this Doc View Source BasePath Gets the base path. On Linux this is / on Windows C:\\ Declaration public static string BasePath { get; } Property Value Type Description System.String The base path. | Improve this Doc View Source CommandHandlers Gets or sets the command handler. This is called after the user has hit Enter and can be used to replace what was entered Declaration public List<Func<string, string>> CommandHandlers { get; } Property Value Type Description System.Collections.Generic.List < System.Func < System.String , System.String >> The command handler. | Improve this Doc View Source Error This function can be called to render a pretty error message. Declaration public Action<string> Error { get; set; } Property Value Type Description System.Action < System.String > | Improve this Doc View Source History The shell history Declaration public List<HistoryItem> History { get; } Property Value Type Description System.Collections.Generic.List < HistoryItem > | Improve this Doc View Source HomeDirectory Gets the home directory. Declaration public string HomeDirectory { get; } Property Value Type Description System.String The home directory. | Improve this Doc View Source LastExitCode Gets or sets the last exit code. Declaration public int LastExitCode { get; } Property Value Type Description System.Int32 The last exit code. | Improve this Doc View Source LoadAssemblyFromFileAsync This function can be called to load a .NET DLL into memory Declaration public Func<string, Task> LoadAssemblyFromFileAsync { get; } Property Value Type Description System.Func < System.String , System.Threading.Tasks.Task > | Improve this Doc View Source LoadScriptFromFileAsync This function can be called to load script into memory Declaration public Func<string, Task> LoadScriptFromFileAsync { get; } Property Value Type Description System.Func < System.String , System.Threading.Tasks.Task > | Improve this Doc View Source Paths Gets the paths. Declaration public List<string> Paths { get; } Property Value Type Description System.Collections.Generic.List < System.String > The paths. | Improve this Doc View Source Prompt Gets or sets the function used to return the prompt string. This function is generally set by the user to customize the prompt Declaration public Func<ColorString> Prompt { get; set; } Property Value Type Description System.Func < ColorString > The prompt function | Improve this Doc View Source WorkingDirectory Gets or sets the working directory. Declaration public string WorkingDirectory { get; } Property Value Type Description System.String The working directory. Methods | Improve this Doc View Source AddCmdAlias(String, String) Adds a command alias An example of this is Shell.AddCmdAlias(\"ls\", \"ls --color=auto \"); Declaration public void AddCmdAlias(string command, string replacement) Parameters Type Name Description System.String command The user entered command. System.String replacement The C# replacement. | Improve this Doc View Source AddCSAlias(String, String) Adds a shell alias for C# commands An example of this is Shell.AddCSAlias(\"echo\", \"Console.WriteLine(&quot;{0}&quot;);\"); Declaration public void AddCSAlias(string command, string replacement) Parameters Type Name Description System.String command The user entered command. System.String replacement The C# replacement. | Improve this Doc View Source ChangeDir(String) API call to changes the working directory. Declaration public void ChangeDir(string location) Parameters Type Name Description System.String location The location. Exceptions Type Condition System.IO.DirectoryNotFoundException | Improve this Doc View Source ConvertPathToAbsolute(String) Converts the a file path to absolute based on the current working directory This is a public API and is used in #load Declaration public string ConvertPathToAbsolute(string file) Parameters Type Name Description System.String file The file path Returns Type Description System.String Exceptions Type Condition System.IO.FileNotFoundException The file requested: \" + file + \" does not exist and cannot be loaded | Improve this Doc View Source Execute(String, Object) Declaration public ProcessEx Execute(string input, object r = null) Parameters Type Name Description System.String input System.Object r Returns Type Description ProcessEx | Improve this Doc View Source ExecuteAsync(String, Object) Declaration public Task<ProcessEx> ExecuteAsync(string input, object r = null) Parameters Type Name Description System.String input System.Object r Returns Type Description System.Threading.Tasks.Task < ProcessEx >"
  },
  "api/Dotnet.Shell.Logic.Console.html": {
    "href": "api/Dotnet.Shell.Logic.Console.html",
    "title": "Namespace Dotnet.Shell.Logic.Console | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic.Console Interfaces IConsole Defines the method that a console implementation is required to provide"
  },
  "api/Dotnet.Shell.Logic.Console.IConsole.html": {
    "href": "api/Dotnet.Shell.Logic.Console.IConsole.html",
    "title": "Interface IConsole | dotnet-shell",
    "keywords": "Interface IConsole Defines the method that a console implementation is required to provide Namespace : Dotnet.Shell.Logic.Console Assembly : dotnet-shell.dll Syntax public interface IConsole Properties | Improve this Doc View Source BackgroundColor Gets or sets the color of the background. Declaration ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor The color of the background. | Improve this Doc View Source CursorLeft Gets or sets the cursor left position. Declaration int CursorLeft { get; set; } Property Value Type Description System.Int32 The cursor left position. | Improve this Doc View Source CursorTop Gets or sets the cursor top position. Declaration int CursorTop { get; set; } Property Value Type Description System.Int32 The cursor top position. | Improve this Doc View Source CursorVisible Sets a value indicating whether [cursor visible]. Declaration bool CursorVisible { set; } Property Value Type Description System.Boolean true if [cursor visible]; otherwise, false . | Improve this Doc View Source ForegroundColor Gets or sets the color of the foreground. Declaration ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor The color of the foreground. | Improve this Doc View Source KeyAvailiable Gets a value indicating whether [key availiable]. Declaration bool KeyAvailiable { get; } Property Value Type Description System.Boolean true if [key availiable]; otherwise, false . | Improve this Doc View Source WindowHeight Gets the height of the window. Declaration int WindowHeight { get; } Property Value Type Description System.Int32 The height of the window. | Improve this Doc View Source WindowWidth Gets the width of the window. Declaration int WindowWidth { get; } Property Value Type Description System.Int32 The width of the window. Methods | Improve this Doc View Source ReadKey() Reads the next key press Declaration ConsoleKeyInfo ReadKey() Returns Type Description System.ConsoleKeyInfo ConsoleKeyInfo | Improve this Doc View Source RestoreAsync() Restores the terminal screen state Declaration Task RestoreAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SaveAsync() Saves the terminal screen state Declaration Task SaveAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(String) Writes the specified text. Declaration void Write(string text = null) Parameters Type Name Description System.String text The text. | Improve this Doc View Source WriteLine(String) Writes the specified text with a newline at the end Declaration void WriteLine(string message = null) Parameters Type Name Description System.String message The message."
  },
  "api/Dotnet.Shell.Logic.Execution.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.html",
    "title": "Namespace Dotnet.Shell.Logic.Execution | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic.Execution Classes OS This class implements OS actions such as Execution ProcessEx Enums Redirection Flags to determine which stream has been redirected"
  },
  "api/Dotnet.Shell.Logic.Execution.OS.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.OS.html",
    "title": "Class OS | dotnet-shell",
    "keywords": "Class OS This class implements OS actions such as Execution Inheritance System.Object OS Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Execution Assembly : dotnet-shell.dll Syntax public class OS Methods | Improve this Doc View Source Exec(String, Object, Object) Executes the specified cmdline. Declaration public static ProcessEx Exec(string cmdline, object shellObj = null, object redirectionObj = null) Parameters Type Name Description System.String cmdline The cmdline. System.Object shellObj The shell object. System.Object redirectionObj The redirection object. Returns Type Description ProcessEx Process | Improve this Doc View Source GetOSHistoryAsync() Gets the OS command history. Declaration public static Task<IEnumerable<HistoryItem>> GetOSHistoryAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable < HistoryItem >> History | Improve this Doc View Source WriteHistoryAsync(IEnumerable<HistoryItem>) Writes the history asynchronous to the configured history file Declaration public static Task WriteHistoryAsync(IEnumerable<HistoryItem> history) Parameters Type Name Description System.Collections.Generic.IEnumerable < HistoryItem > history The history. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Dotnet.Shell.Logic.Execution.ProcessEx.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.ProcessEx.html",
    "title": "Class ProcessEx | dotnet-shell",
    "keywords": "Class ProcessEx Inheritance System.Object ProcessEx Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic.Execution Assembly : dotnet-shell.dll Syntax public class ProcessEx : IDisposable Constructors | Improve this Doc View Source ProcessEx(Process) Declaration public ProcessEx(Process p) Parameters Type Name Description System.Diagnostics.Process p Properties | Improve this Doc View Source Process Declaration public Process Process { get; } Property Value Type Description System.Diagnostics.Process Methods | Improve this Doc View Source ConvertStdErrToVariable<T>() Converts the standard error to variable. Declaration public T ConvertStdErrToVariable<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ConvertStdOutToVariable<T>() Converts the standard out to variable. Declaration public T ConvertStdOutToVariable<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source CopyStdErr(Object, Stream) Copies the standard error. Declaration public ProcessEx CopyStdErr(object s, Stream stream) Parameters Type Name Description System.Object s The s. System.IO.Stream stream Returns Type Description ProcessEx | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source SignalSuspend() Declaration public void SignalSuspend() | Improve this Doc View Source SignalTerminate() Declaration public void SignalTerminate() | Improve this Doc View Source WaitForExitAsync(CancellationToken) Declaration public Task WaitForExitAsync(CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WaitTillExit(Object) Sets the last exit code. Declaration public ProcessEx WaitTillExit(object s) Parameters Type Name Description System.Object s The s. Returns Type Description ProcessEx Implements System.IDisposable"
  },
  "api/Dotnet.Shell.Logic.Execution.Redirection.html": {
    "href": "api/Dotnet.Shell.Logic.Execution.Redirection.html",
    "title": "Enum Redirection | dotnet-shell",
    "keywords": "Enum Redirection Flags to determine which stream has been redirected Namespace : Dotnet.Shell.Logic.Execution Assembly : dotnet-shell.dll Syntax [Flags] public enum Redirection Fields Name Description Err StdErr redirection None No stream redirection Out StdOut redirection"
  },
  "api/Dotnet.Shell.Logic.html": {
    "href": "api/Dotnet.Shell.Logic.html",
    "title": "Namespace Dotnet.Shell.Logic | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.Logic Classes Settings This defined all the global settings these can either be set on the command line or via a script Enums UserExperience The User Experience to use when console rendering"
  },
  "api/Dotnet.Shell.Logic.Settings.html": {
    "href": "api/Dotnet.Shell.Logic.Settings.html",
    "title": "Class Settings | dotnet-shell",
    "keywords": "Class Settings This defined all the global settings these can either be set on the command line or via a script Inheritance System.Object Settings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Dotnet.Shell.Logic Assembly : dotnet-shell.dll Syntax public class Settings Fields | Improve this Doc View Source Default The default settings used by dotnet-shell Declaration public static Settings Default Field Value Type Description Settings Properties | Improve this Doc View Source AdditionalHistoryFiles Adds one or more history file History files are interpreted as one command per line Declaration [Option(\"additionalHistory\", Required = false, HelpText = \"Path to additional OS specific history files\")] public IEnumerable<string> AdditionalHistoryFiles { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > The history files. | Improve this Doc View Source AdditionalUsings Gets the additional usings. Declaration [Option('u', \"using\", Required = false, HelpText = \"Additional 'using' statements to include\")] public IEnumerable<string> AdditionalUsings { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > The additional usings. | Improve this Doc View Source APIPort Gets or sets the API port. Declaration [Option(\"apiport\", Required = false, HelpText = \"The port number of the API interface\", Hidden = true, SetName = \"history\")] public int APIPort { get; set; } Property Value Type Description System.Int32 The API port. | Improve this Doc View Source DontRunWizard Declaration [Option(\"nowizard\", Required = false, HelpText = \"Do not try and run the initial set up wizard\", Default = false)] public bool DontRunWizard { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EarlyDebuggerAttach Gets or sets a value indicating whether [early debugger attach]. Declaration [Option(\"earlyDebuggerAttach\", Required = false, HelpText = \"Enables early debugging for initialization related issues\", Default = false)] public bool EarlyDebuggerAttach { get; set; } Property Value Type Description System.Boolean true if [early debugger attach]; otherwise, false . | Improve this Doc View Source HistoryFile Declaration [Option(\"historyPath\", Required = false, HelpText = \"Path to CSX history file\")] public string HistoryFile { get; set; } Property Value Type Description System.String | Improve this Doc View Source HistoryMode Gets or sets a value indicating whether [history mode]. Declaration [Option(\"history\", Required = false, HelpText = \"Starts the shell in history display mode\", Hidden = true, Default = false, SetName = \"history\")] public bool HistoryMode { get; set; } Property Value Type Description System.Boolean true if [history mode]; otherwise, false . | Improve this Doc View Source HistoryPopupCommand Gets the history popup command. Declaration [Option(\"historyCmd\", Required = false, HelpText = \"dotnet-shell command line to execute when the history subprocess. Must include {0} format specifier for DLL location, {1} for port and {2} for token parameters\", Default = \"dotnet {0} --history --apiport {1} --token {2}\")] public string HistoryPopupCommand { get; set; } Property Value Type Description System.String The history popup command. | Improve this Doc View Source PopupCommand Gets the popup command. Declaration [Option(\"popupCmd\", Required = false, HelpText = \"Command to run to raise a system popup window, must include {0} format specifier for the dotnet-shell command\", Default = \"tmux popup -KER '{0}' -x 60 -y 0 -w 60% -h 100%\")] public string PopupCommand { get; set; } Property Value Type Description System.String The popup command. | Improve this Doc View Source ProfileScriptPath Gets the profile script path. Declaration [Option(\"profile\", Required = false, HelpText = \"The path to the personal initialization script file (core.nsh)\")] public string ProfileScriptPath { get; set; } Property Value Type Description System.String The profile script path. | Improve this Doc View Source ShowPreProcessorOutput Gets or sets a value indicating whether [show pre processor output]. Declaration [Option(\"showPreProcessorOutput\", Required = false, HelpText = \"Outputs preprocessed scripts and commands to StdOut prior to execution\", Default = false)] public bool ShowPreProcessorOutput { get; set; } Property Value Type Description System.Boolean true if [show pre processor output]; otherwise, false . | Improve this Doc View Source SubShell Gets the sub shell. Declaration [Option('s', \"subShell\", Required = false, HelpText = \"Path to the sub shell to invoke commands with\")] public string SubShell { get; set; } Property Value Type Description System.String The sub shell. | Improve this Doc View Source SubShellArgumentsFormat Gets the sub shell arguments format. Declaration [Option('a', \"subShellArgs\", Required = false, HelpText = \"Arguments to the provided to the SubShell, this MUST include the format specifier {0}\")] public string SubShellArgumentsFormat { get; set; } Property Value Type Description System.String The sub shell arguments format. | Improve this Doc View Source Token Gets or sets the token. Declaration [Option(\"token\", Required = false, HelpText = \"Token shared between client and server instances\", Hidden = true, SetName = \"history\")] public string Token { get; set; } Property Value Type Description System.String The token. | Improve this Doc View Source UX Gets or sets the user experience mode. Declaration [Option('x', \"ux\", Required = false, HelpText = \"The user experience mode the shell starts in\", Default = UserExperience.Enhanced)] public UserExperience UX { get; set; } Property Value Type Description UserExperience The ux. | Improve this Doc View Source Verbose Gets or sets a value indicating whether this Settings is verbose. Declaration [Option('v', \"verbose\", Required = false, HelpText = \"Set output to verbose messages.\", Default = false)] public bool Verbose { get; set; } Property Value Type Description System.Boolean true if verbose; otherwise, false . Methods | Improve this Doc View Source AddComplexDefaults() Declaration public void AddComplexDefaults()"
  },
  "api/Dotnet.Shell.Logic.UserExperience.html": {
    "href": "api/Dotnet.Shell.Logic.UserExperience.html",
    "title": "Enum UserExperience | dotnet-shell",
    "keywords": "Enum UserExperience The User Experience to use when console rendering Namespace : Dotnet.Shell.Logic Assembly : dotnet-shell.dll Syntax public enum UserExperience Fields Name Description Classic The classic mode - similar to Bash Enhanced Enhanced mode with improved history TmuxEnhanced The TMux enhanced version which uses Tmux popup functionality"
  },
  "api/Dotnet.Shell.UI.ColorString.html": {
    "href": "api/Dotnet.Shell.UI.ColorString.html",
    "title": "Class ColorString | dotnet-shell",
    "keywords": "Class ColorString Implements a color string replacemnt class using ANSI formatting escape codes Inheritance System.Object ColorString Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Dotnet.Shell.UI Assembly : dotnet-shell.dll Syntax public class ColorString Constructors | Improve this Doc View Source ColorString(String, Color) Initializes a new instance of the ColorString class. Declaration public ColorString(string s, Color c) Parameters Type Name Description System.String s The s. System.Drawing.Color c The c. | Improve this Doc View Source ColorString(String, Color, Color) Initializes a new instance of the ColorString class. Declaration public ColorString(string s, Color c, Color d) Parameters Type Name Description System.String s The s. System.Drawing.Color c The c. System.Drawing.Color d The d. Properties | Improve this Doc View Source Item[Int32] Gets the System.Char with the specified i. Declaration public char this[int i] { get; } Parameters Type Name Description System.Int32 i The i. Property Value Type Description System.Char The System.Char . | Improve this Doc View Source Length Gets the length. Declaration public int Length { get; } Property Value Type Description System.Int32 The length. | Improve this Doc View Source Text Gets the string representation but without formatting characters Declaration public string Text { get; } Property Value Type Description System.String | Improve this Doc View Source TextWithFormattingCharacters Gets the string representation but WITH formatting characters Declaration public string TextWithFormattingCharacters { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source FromRawANSI(String) Convert to a color string from an ANSI string with escape sequences Declaration public static ColorString FromRawANSI(string ansi) Parameters Type Name Description System.String ansi Returns Type Description ColorString | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Operators | Improve this Doc View Source Addition(ColorString, ColorString) Implements the operator +. Declaration public static ColorString operator +(ColorString a, ColorString b) Parameters Type Name Description ColorString a a. ColorString b The b. Returns Type Description ColorString The result of the operator. | Improve this Doc View Source Implicit(String to ColorString) Performs an implicit conversion from System.String to ColorString . Declaration public static implicit operator ColorString(string t) Parameters Type Name Description System.String t The t. Returns Type Description ColorString The result of the conversion."
  },
  "api/Dotnet.Shell.UI.html": {
    "href": "api/Dotnet.Shell.UI.html",
    "title": "Namespace Dotnet.Shell.UI | dotnet-shell",
    "keywords": "Namespace Dotnet.Shell.UI Classes ColorString Implements a color string replacemnt class using ANSI formatting escape codes"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to dotnet-shell the C# script compatible shell | dotnet-shell",
    "keywords": "Welcome to dotnet-shell the C# script compatible shell dotnet-shell is a replacement for your *Unix shell (bash,sh,dash etc) that brings C#/Dotnet to the command line in a familiar and Bash-like syntax. It combines the best of C# with the shell commands you already know. If you've used dotnetscript or nake you will feel right at home. Best of all it is easy to take your existing Unix shell scripts and port them to dotnet-shell format. dotnet-shell acts as a meta shell that sits on top of your system shell (Bash/PowerShell etc). It replaces hard to remember loop/if syntax with C# and enables you to use the shell constructs that you know and can't unlearn! It works in both interactive and script modes allowing you to build variables and arguments in C# and use them easily in shell commands. It is fully featured, supporting: Bash-style tab completion augmented with C# autocompletion Advanced history searching with an improved UX (helped by tmux if desired) Support for loading Nugets, DLLs and other scripts Powerline, command aliasing Comparison to other projects / check these out too Since the dotnet runtime enabled REPL (Read Evaluate Print Loop) support there have been a few different projects that have evolved to use it, some of the best are: dotnet-script - A great scripting environment which we use internally to run commands. The UX however is not designed for everyday use and the command line environment lacks an easy way to run system commands. Nake - Another great project focused on build scripts instead of interactive shell environments. Orbital Shell - A great project but focused on being cross platform, supporting the same commands on multiple platforms, as such 'OS' commands have been reimplemented. We took the view of keeping existing logic/syntax similar enough to aid porting. How to install First you need to install the .NET5. runtime. this is usually easiest via your OS' package manager. Next run: dotnet --info If you see a lot of .NET version information that starts with 5.0 then you have a working copy of the .NET runtime. dotnet-shell is a dotnet tool. It is installed by: dotnet tool install dotnet-shell OS Status Linux Stable Windows Experimental BSD Unsupported Syntax cheatsheet In general dotnet-shell uses the same syntax of dotnetscript . To make some operations easier this has been extended so that: shell commands are created from any line that doesn't end with a ';' or part of existing C# syntax - just like in Bash backtick characters allow you to execute a command and capture its stdout (rather than letting it go to the screen) nake style variables $...$ allow you to take variables from C# and include these in your system commands A key point to note is that in generally a line needs to end with a ';' to be interpreted as C# (unless it is part of loop, class etc) File extension Usage CSX File contains dotnetscript syntax - no dotnet-shell extension can be used nsh CSX script syntax with our extensions CS Can be loaded and executed with #load DLL Can be loaded with #r The ExampleScripts repo is a good place to see what you can do. #!/usr/bin/env dotnet-shell #r \"System.Xml.Linq\" // reference assemblies #r \"nuget: Newtonsoft.Json\" // and nuget packages is fully supported #load \"Other.csx\" // You can load other script files #load ~/ExampleScripts/CmdSyntax.nsh // (both absolute and relative paths are fine) using System; // many namespaces are loaded by default using System.Collections.Generic; using System.Data; using System.Xml; using System.Xml.Linq; using Microsoft.CSharp; using static System.Console; // static members smake your scripts shorter WriteLine(\"Are you ready? Y/N:\"); // You can run a system command just like in Bash echo \"Hello world\" // Wrapping a command in ``(backticks) allows you to capture the output var x = `ps`; // but default this is a string // You can also create more complex objects DirectoryInfo dir = `/bin/echo /bin/`; FileInfo file = `/bin/echo /bin/ls`; int aNumber=`/bin/echo 500`; // You can combine these into something quite powerful List<string> z=`dmesg`; z.Distinct().Count(); var variable = \"Lets say you have a variable\"; // This is how you pass it into a system command echo $variable$ Command line help -v, --verbose (Default: false) Set output to verbose messages. --earlyDebuggerAttach (Default: false) Enables early debugging for initialization related issues --showPreProcessorOutput (Default: false) Outputs preprocessed scripts and commands to StdOut prior to execution -x, --ux (Default: Enhanced) The user experience mode the shell starts in --profile The path to the personal initialization script file (core.nsh) -s, --subShell Path to the sub shell to invoke commands with -a, --subShellArgs Arguments to the provided to the SubShell, this MUST include the format specifier {0} -u, --using Additional 'using' statements to include --popupCmd (Default: tmux popup -KER '{0}' -x 60 -y 0 -w 60% -h 100%) Command to run to raise a system popup window, must include {0} format specifier for the dotnet-shell command --historyCmd (Default: dotnet {0} --history --apiport {1} --token {2}) dotnet-shell command line to execute when the history subprocess. Must include {0} format specifier for DLL location, {1} for port and {2} for token parameters --additionalHistory Path to additional OS specific history files --historyPath Path to CSX history file --nowizard (Default: false) Do not try and run the initial set up wizard --help Display this help screen. --version Display version information. How to build from source Visual Studio solutions and VS Code projects are published with this repo. Otherwise you can checkout the repo and run: dotnet build dotnet src/Shell/bin/Debug/net5.0/dotnet-shell.dll Author i-am-shodan Twitter: @therealshodan Github: @i-am-shodan Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . License Copyright � 2021 i-am-shodan . This project is MIT licensed. This README was generated by readme-md-generator"
  }
}